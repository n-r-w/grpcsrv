// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source interface.go -destination interface_mock.go -package grpcsrv
//

// Package grpcsrv is a generated GoMock package.
package grpcsrv

import (
	context "context"
	http "net/http"
	reflect "reflect"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockIGRPCInitializer is a mock of IGRPCInitializer interface.
type MockIGRPCInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockIGRPCInitializerMockRecorder
}

// MockIGRPCInitializerMockRecorder is the mock recorder for MockIGRPCInitializer.
type MockIGRPCInitializerMockRecorder struct {
	mock *MockIGRPCInitializer
}

// NewMockIGRPCInitializer creates a new mock instance.
func NewMockIGRPCInitializer(ctrl *gomock.Controller) *MockIGRPCInitializer {
	mock := &MockIGRPCInitializer{ctrl: ctrl}
	mock.recorder = &MockIGRPCInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGRPCInitializer) EXPECT() *MockIGRPCInitializerMockRecorder {
	return m.recorder
}

// GetOptions mocks base method.
func (m *MockIGRPCInitializer) GetOptions() InitializeOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(InitializeOptions)
	return ret0
}

// GetOptions indicates an expected call of GetOptions.
func (mr *MockIGRPCInitializerMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockIGRPCInitializer)(nil).GetOptions))
}

// RegisterGRPCServer mocks base method.
func (m *MockIGRPCInitializer) RegisterGRPCServer(arg0 *grpc.Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterGRPCServer", arg0)
}

// RegisterGRPCServer indicates an expected call of RegisterGRPCServer.
func (mr *MockIGRPCInitializerMockRecorder) RegisterGRPCServer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGRPCServer", reflect.TypeOf((*MockIGRPCInitializer)(nil).RegisterGRPCServer), arg0)
}

// RegisterHTTPHandler mocks base method.
func (m *MockIGRPCInitializer) RegisterHTTPHandler(arg0 context.Context, arg1 *runtime.ServeMux, arg2 *grpc.ClientConn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHTTPHandler", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHTTPHandler indicates an expected call of RegisterHTTPHandler.
func (mr *MockIGRPCInitializerMockRecorder) RegisterHTTPHandler(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHTTPHandler", reflect.TypeOf((*MockIGRPCInitializer)(nil).RegisterHTTPHandler), arg0, arg1, arg2)
}

// MockIHealther is a mock of IHealther interface.
type MockIHealther struct {
	ctrl     *gomock.Controller
	recorder *MockIHealtherMockRecorder
}

// MockIHealtherMockRecorder is the mock recorder for MockIHealther.
type MockIHealtherMockRecorder struct {
	mock *MockIHealther
}

// NewMockIHealther creates a new mock instance.
func NewMockIHealther(ctrl *gomock.Controller) *MockIHealther {
	mock := &MockIHealther{ctrl: ctrl}
	mock.recorder = &MockIHealtherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealther) EXPECT() *MockIHealtherMockRecorder {
	return m.recorder
}

// LiveEndpoint mocks base method.
func (m *MockIHealther) LiveEndpoint(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LiveEndpoint", arg0, arg1)
}

// LiveEndpoint indicates an expected call of LiveEndpoint.
func (mr *MockIHealtherMockRecorder) LiveEndpoint(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiveEndpoint", reflect.TypeOf((*MockIHealther)(nil).LiveEndpoint), arg0, arg1)
}

// ReadyEndpoint mocks base method.
func (m *MockIHealther) ReadyEndpoint(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadyEndpoint", arg0, arg1)
}

// ReadyEndpoint indicates an expected call of ReadyEndpoint.
func (mr *MockIHealtherMockRecorder) ReadyEndpoint(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadyEndpoint", reflect.TypeOf((*MockIHealther)(nil).ReadyEndpoint), arg0, arg1)
}
